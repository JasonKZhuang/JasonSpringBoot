/**
 * Applying spring security starting from adding the dependence "spring-boot-starter-security" into pom.xml,
 * After this adding, restart server, on the background terminal there is a password generated by spring
 * the web page will need to user to input user's name (user) and password (temperate password)
 * basic and form based authentication, which is created by server and stored in client browser
 */
//https://docs.spring.io/spring-security/site/docs/5.0.0.RELEASE/reference/htmlsingle/#samples
package com.jasonz.security;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.jasonz.service.IUserDetailsService;

@Configuration
@EnableWebSecurity
public class SecurityConfigurationAdapter extends WebSecurityConfigurerAdapter
{
	private final Log logger = LogFactory.getLog(SecurityConfigurationAdapter.class);
	
	@Autowired
	private Environment environment;
	
	@Autowired
	private final IUserDetailsService userDetailsService;
	
	@Autowired
	private final BCryptPasswordEncoder bCryptPasswordEncoder;
	
	public SecurityConfigurationAdapter(IUserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder)
	{
		super();
		this.userDetailsService = userDetailsService;
		this.bCryptPasswordEncoder = bCryptPasswordEncoder;
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		 http
	       	//https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html
	       	.cors().and()//Spring Framework provides first class support for CORS.
	        .csrf().disable()
	        .authorizeRequests() //begin authorize for all requests
	        .antMatchers(HttpMethod.POST, SecurityConstants.PUBLIC_REQUEST_SIGN_IN_URL).permitAll() //permit request for this matchers
	        .antMatchers(HttpMethod.POST, SecurityConstants.PUBLIC_REQUEST_SIGN_UP_URL).permitAll() //permit request for this matchers
	        .anyRequest().authenticated()// any other request must be authenticated
	        
	        .and()
	        .addFilter(new AuthenticationFilter(authenticationManager()))
	        .addFilter(new AuthorizationFilter(authenticationManager()))
	        .sessionManagement()
	        .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	        

	     http.headers().frameOptions().disable(); //disable frame in HTML for security reasons
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
	}
	
	
}
